// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoomMembership {
  id          String @id @default(cuid())
  roomId      String
  studentId   String
  professorId String

  room      Room    @relation(fields: [roomId], references: [id])
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?

  @@unique([roomId, studentId], name: "UniqueRoomStudent")
}

model Room {
  id          String           @id @default(cuid())
  code        String           @unique // Código da sala
  name        String // Nome da sala
  activities  Activity[] // Relacionamento com as atividades da sala
  memberships RoomMembership[]
  professorId String
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  role           String           @default("student")
  accounts       Account[]
  sessions       Session[]
  memberships    RoomMembership[]
  HonorBadge     HonorBadge[]

  @@map("users")
}

model HonorBadge {
  id        String @id @default(cuid())
  name      String
  color     String
  icon      String
  idStudent String // Adicionando idStudent como uma chave estrangeira
  user      User   @relation(fields: [idStudent], references: [id])

  @@unique([name, color, icon])
}

model Activity {
  id          String @id @default(cuid())
  description String
  room        Room   @relation(fields: [roomId], references: [id])
  roomId      String // ID da sala à qual a atividade pertence
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
